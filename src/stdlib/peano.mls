# Peano integers

(set (quote p:next) (lambda (quote i) (quote (quote i))))
(set (quote p:ZERO) (quote p:ZERO))

(set (quote 0) p:ZERO)
(set (quote 1) (p:next 0))
(set (quote 2) (p:next 1))
(set (quote 3) (p:next 2))
(set (quote 4) (p:next 3))
(set (quote 5) (p:next 4))
(set (quote 6) (p:next 5))
(set (quote 7) (p:next 6))
(set (quote 8) (p:next 7))
(set (quote 9) (p:next 8))

# Integer operations

# Zero-check

(set (quote p:zero?)
    (lambda (quote n)
        (quote (eqtree? n 0))
    )
)

# Increment

(set (quote p:inc)
    (lambda (quote n)
        (quote (quote n))
    )
)

# Decrement

(set (quote p:dec)
    (lambda (quote n)
        (quote (branch (p:zero? n)
            (quote (error (decrementing peano zero not allowed)))
            (quote (unquote n))
        ))
    )
)

# Comparison

(set (quote p:lt?)
    (lambda (quote a) (quote b)
        (quote (branch (p:zero? b)
            (quote false)
            (quote (branch (p:zero? a)
                (quote true)
                (quote (p:lt? (p:dec a) (p:dec b)))
            ))
        ))
    )
)

(set (quote p:gt?)
    (lambda (quote a) (quote b)
        (quote (and (not (eqtree? a b)) (not (p:lt? a b))))
    )
)

# Min and max

(set (quote p:min)
    (lambda (quote a) (quote b)
        (quote (branch (p:lt? a b)
            (quote a)
            (quote b)
        ))
    )
)

(set (quote p:max)
    (lambda (quote a) (quote b)
        (quote (branch (p:lt? a b)
            (quote b)
            (quote a)
        ))
    )
)

# Addition

(set (quote p:add)
    (lambda (quote a) (quote b)
        (quote (branch (p:zero? a)
            (quote b)
            (quote (p:add (p:dec a) (p:inc b)))
        ))
    )
)

# Subtraction

(set (quote p:sub_nocheck)
    (lambda (quote a) (quote b)
        (quote (branch (p:zero? b)
            (quote a)
            (quote (p:sub_nocheck (p:dec a) (p:dec b)))
        ))
    )
)

(set (quote p:sub)
    (lambda (quote a) (quote b)
        (quote (branch (p:lt? a b)
            (quote (error (subtraction would underflow)))
            (quote (p:sub_nocheck a b))
        ))
    )
)

# Multiplication

(set (quote p:mul_helper)
    (lambda (quote a) (quote b) (quote c)
        (quote (branch (p:zero? c)
            (quote a)
            (quote (p:mul_helper (p:add a b) b (p:dec c)))
        ))
    )
)

(set (quote p:mul_lt_nocheck)
    (lambda (quote a) (quote b)
        (quote (branch (p:zero? a)
            (quote 0)
            (quote (p:mul_helper 0 b a))
        ))
    )
)

(set (quote p:mul)
    (lambda (quote a) (quote b)
        (quote (p:mul_lt_nocheck (p:min a b) (p:max a b)))
    )
)

