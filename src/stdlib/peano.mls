# Peano integers

(set (quote P_next) (lambda (quote i) (quote (quote i))))
(set (quote P_ZERO) (quote P_ZERO))

(set (quote 0) P_ZERO)
(set (quote 1) (P_next 0))
(set (quote 2) (P_next 1))
(set (quote 3) (P_next 2))
(set (quote 4) (P_next 3))
(set (quote 5) (P_next 4))
(set (quote 6) (P_next 5))
(set (quote 7) (P_next 6))
(set (quote 8) (P_next 7))
(set (quote 9) (P_next 8))

# Integer operations

# Zero-check

(set (quote P_zero?)
    (lambda (quote n)
        (quote (eqtree? n 0))
    )
)

# Increment

(set (quote P_inc)
    (lambda (quote n)
        (quote (quote n))
    )
)

# Decrement

(set (quote P_dec)
    (lambda (quote n)
        (quote (branch (P_zero? n)
            (quote (error (decrementing peano zero not allowed)))
            (quote (unquote n))
        ))
    )
)

# Comparison

(set (quote P_lt?)
    (lambda (quote a) (quote b)
        (quote (branch (P_zero? b)
            (quote false)
            (quote (branch (P_zero? a)
                (quote true)
                (quote (P_lt? (P_dec a) (P_dec b)))
            ))
        ))
    )
)

(set (quote P_gt?)
    (lambda (quote a) (quote b)
        (quote (and (not (eqtree? a b)) (not (P_lt? a b))))
    )
)

# Min and max

(set (quote P_min)
    (lambda (quote a) (quote b)
        (quote (branch (P_lt? a b)
            (quote a)
            (quote b)
        ))
    )
)

(set (quote P_max)
    (lambda (quote a) (quote b)
        (quote (branch (P_lt? a b)
            (quote b)
            (quote a)
        ))
    )
)

# Addition

(set (quote P_add)
    (lambda (quote a) (quote b)
        (quote (branch (P_zero? a)
            (quote b)
            (quote (P_add (P_dec a) (P_inc b)))
        ))
    )
)

# Subtraction

(set (quote P_sub_nocheck)
    (lambda (quote a) (quote b)
        (quote (branch (P_zero? b)
            (quote a)
            (quote (P_sub_nocheck (P_dec a) (P_dec b)))
        ))
    )
)

(set (quote P_sub)
    (lambda (quote a) (quote b)
        (quote (branch (P_lt? a b)
            (quote (error (subtraction would underflow)))
            (quote (P_sub_nocheck a b))
        ))
    )
)

# Multiplication

(set (quote P_mul_helper)
    (lambda (quote a) (quote b) (quote c)
        (quote (branch (P_zero? c)
            (quote a)
            (quote (P_mul_helper (P_add a b) b (P_dec c)))
        ))
    )
)

(set (quote P_mul_lt_nocheck)
    (lambda (quote a) (quote b)
        (quote (branch (P_zero? a)
            (quote 0)
            (quote (P_mul_helper 0 b a))
        ))
    )
)

(set (quote P_mul)
    (lambda (quote a) (quote b)
        (quote (P_mul_lt_nocheck (P_min a b) (P_max a b)))
    )
)

